/**
 * tsconfig.json
 *
 * Description: Typescript Configuration file. Visit https://aka.ms/tsconfig.json to read more about this file.
 *
 */

{
  "compilerOptions": {
    // -- Language and Environment --

    // Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
    "target": "ES2020",
    // Specify a set of bundled library declaration files that describe the target runtime environment.
    "lib": ["dom", "esnext"],
    // Specify what JSX code is generated.
    "jsx": "react",

    // -- Modules --

    // Specify what module code is generated.
    "module": "CommonJS",
    // Specify how TypeScript looks up a file from a given module specifier.
    "moduleResolution": "node",
    // Specify the base directory to resolve non-relative module names.
    "baseUrl": "./src",
    // Enable importing .json files
    "resolveJsonModule": true,

    // -- JavaScript Support --

    // Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.
    "allowJs": true,

    // -- Emit --

    // Generate .d.ts files from TypeScript and JavaScript files in your project.
    "declaration": true,
    // Create sourcemaps for d.ts files.
    "declarationMap": true,
    // Create source map files for emitted JavaScript files.
    "sourceMap": true,
    // Specify an output folder for all emitted files.
    "outDir": "release/app/dist",

    // -- Interop Constraints --

    // Allow 'import x from y' when a module doesn't have a default export.
    "allowSyntheticDefaultImports": true,
    // Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility.
    "esModuleInterop": true,
    // Ensure that casing is correct in imports.
    "forceConsistentCasingInFileNames": true,

    // -- Type Checking --

    // Enable all strict type-checking options.
    "strict": true,
    // Enable error reporting for expressions and declarations with an implied `any` type..
    "noImplicitAny": true,
    // Enable error reporting when a local variables aren't read.
    "noUnusedLocals": true,
    // Raise an error when a function parameter isn't read
    "noUnusedParameters": true,
    // Enable error reporting for codepaths that do not explicitly return in a function.
    "noImplicitReturns": true,
    // Enable error reporting for fallthrough cases in switch statements.
    "noFallthroughCasesInSwitch": true
  },
  "exclude": ["release/build", "release/app/dist"]
}
